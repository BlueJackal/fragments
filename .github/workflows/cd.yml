# Continuous Delivery Workflow
name: cd

on:
  push:
    tags:
      - 'v**' # Our CD workflow will trigger whenever we push a new version ($ npm version 0.5)

jobs:
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      # Step 1 - Checkout our code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2 - Build the image with docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3 - Set up AWS credentials using our GitHub Secrets (which need to be reset after every lab)
      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      # Logging & Troubleshooting
      - name: Verify AWS Configuration
        run: |
          aws sts get-caller-identity
          aws ecr describe-repositories --repository-names fragments || echo "Repository check failed"

      # Step 4 - Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # ECR Debugging
      - name: Debug ECR Login
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "Docker Login Succeeded"

      # Step 5 - Push docker image to ECR with the 'latest' tag
      - name: Build and push to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      # ECR Debugging
      - name: Verify ECR Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        run: |
          aws ecr describe-images --repository-name $ECR_REPO --image-ids imageTag=$VERSION_TAG

      # Step 6: Update our ECS task definition to use the new image/tag
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        with:
          task-definition: fragments-definition.json
          container-name: fragments-container
          # Use the image we just built and pushed to ECR for this tag
          image: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}
          # Add all necessary environment variables WITHOUT AWS credentials
          # NOTE: We're no longer including AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
          # since we're using IAM roles instead
          environment-variables: |
            LOG_LEVEL=info
            NODE_ENV=production
            HTPASSWD_FILE=tests/.htpasswd
            AWS_COGNITO_POOL_ID=us-east-1_59v1tcHFd
            AWS_COGNITO_CLIENT_ID=4vko4s45m9795767njrj9b62le
            AWS_S3_BUCKET_NAME=csimon-fragments

      # Deploy our updated task definition to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.update-task-def.outputs.task-definition }}
          cluster: fragments-cluster2
          service: fragments-service
          wait-for-service-stability: true
